version: 0.2

phases:
  pre_build:
    commands:
      - echo "Iniciando sesión en Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_SNAPSHOTS
      - |
        if [ -f "config.toml" ]; then
          export LAMBDA_VERSION=$(grep "version =" config.toml | cut -d '"' -f 2)
        else
          echo "No se encontró config.toml, usando timestamp como versión"
          export LAMBDA_VERSION="dev-$(date +%Y%m%d%H%M%S)"
        fi
      - export IMAGE_TAG="${LAMBDA_NAME_PREFIX}_${LAMBDA_VERSION}"
      - echo "Usando tag de imagen:$IMAGE_TAG"

  build:
    commands:
      - echo "Construyendo la imagen Docker con la etiqueta $IMAGE_TAG..."
      - docker build -t $ECR_REPO_SNAPSHOTS:$IMAGE_TAG .
      - echo "Taggeando también como latest-dev"
      - docker tag $ECR_REPO_SNAPSHOTS:$IMAGE_TAG $ECR_REPO_SNAPSHOTS:latest-dev

  post_build:
    commands:
      - echo "Subiendo la imagen a ECR..."
      - docker push $ECR_REPO_SNAPSHOTS:$IMAGE_TAG
      - docker push $ECR_REPO_SNAPSHOTS:latest-dev
      - echo "Actualizando la función Lambda..."
      - |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $ECR_REPO_SNAPSHOTS:$IMAGE_TAG
      - echo "Lambda actualizada exitosamente con imagen:$IMAGE_TAG"